@startuml

package facade <<Rectangle>> {
  class Compiler
}

class Compiler{
  +Compiler()
  +compile(String): int
}

package "compiler subsystem classes" <<Rectangle>> {
  class Tokenizer
  class Generator
  class Parser
  class Node
  class OperandNode
  class ExpressionNode
}

class Tokenizer{
  +Tokenizer()
  +tokenize(String): List<String>
}

class Generator{
  +Generator()
  +generate(Node): int
}

class Parser{
  +expressionStack: Stack<String>
  +operandStack: Stack<String>
  +Parser()
  +parse(List<String>): Node
}

class Node{
  +Node()
}

class OperandNode{
  -value: int
  +OperandNode()
  +getValue(): int
  +setValue(int): void
}

class ExpressionNode{
  -operator: char
  +ExpressionNode()
  +getOperator(): char
  +setOperator(char): void
  +getLeft(): Node
  +setLeft(Node): void
  +getRight(): Node
  +setRight(Node): void
}



Compiler ..> Tokenizer 
Compiler ..> Generator
Compiler ..> Node
Generator .> Node
Compiler ..> Parser
Node <. Parser
Node <|-- OperandNode
Node <|-- ExpressionNode


@enduml
